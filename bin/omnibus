#!/bin/bash

echo "Ommnibus repository preparation tool..."

if [ $# -lt 2 ]; then
  echo "Usage: $0 <destination-omnibus-directory> <source-repository> [...]"
  echo "> No source repository supplied."
  if [ $# -eq 0 ]; then
    echo "> No destination omnibus directory supplied."
  fi
  exit 1
fi

TMP='/dev/shm'
if [ ! -d "$TMP" ]; then
  TMP='/tmp'
fi

LINE="-----------------------------------------------------------------------------------"

ROOT="`pwd`/$1"

if [ ! -d "$ROOT" ]; then
  echo "Destination omnibus directory does not exist: $ROOT"
  exit 1
fi

cd $ROOT

if [ ! `git show 2> /dev/null | grep "commit" | wc -l` -eq 1 ]; then
  echo "Destination omnibus directory does not exist: $ROOT"
  exit 1
fi

REPOSITORIES=( "$@" )
TMP="$TMP/omnibusin.$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)"
mkdir $TMP

for REPO in $REPOSITORIES
  REPO="$TMP/$1"

  echo $LINE

  if [ ! -d "$REPO" ]; then
    echo $LINE
    echo "Source repository: git@github.com:celluloid/$1.git"
    cd `pwd`
    if ! git clone --mirror "git@github.com:celluloid/$1.git" $1; then
      echo "Failed to clone: $1"
      exit 1
    fi
    if [ ! -d "$REPO" ]; then
      echo "Repository somehow still not there. Fail!"
      exit 1
    fi
    echo $LINE
  else
    echo "Not working with clean temporary path... impossible. Fail!"
    exit 1
  fi

  REPO=$( cd $ROOT/$1; pwd )
  cd $REPO

  echo "> Source repository: $1"
  echo "> Source directory: $REPO"
  echo $LINE

  if [ `git remote | grep origin | wc -l` -gt 0 ]; then
    #de echo "Fetching current state, and all branches..."
    #de git fetch --all #de > /dev/null
    #de git pull --all #de > /dev/null
    echo "Removing remote origin linkage to be safe. Snip."
    git remote rm origin > /dev/null 2> /dev/null
  fi

  echo $LINE
  echo "These branches will all be migrated:"
  echo $LINE


  for branch in `git branch | grep -v master | grep -v "refs/"`; do
    if [ ! $branch = 'master' ] && [[ ! $branch == "refs/"* ]]; then
      git branch -m "$branch" "$1/$branch"
      printf "> %35s becomes $1/$branch\n" $branch
    fi
  done

  exit 0

  echo "Preserving logs and files as-is, but as sub-directory."
  git filter-branch --tree-filter \
          'mkdir $1; \
          find -maxdepth 1 \
              -not -name . \
              -not -name .git \
              -not -name $1 \
          | xargs -I{} mv {} $1' \
      -d /dev/shm/$1 -- --all #de Do this in a tmpfs, without all kinds of I/O.

  echo "Garbage collection..."
  git gc --aggresive
fi

rmdir 
