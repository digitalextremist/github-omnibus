#!/usr/bin/env ruby

require 'colorize'

start = Time.now #de Not monotonic, but bah.

puts LINE = "-----------------------------------------------------------------------------------".cyan.bold.freeze
puts "[ #{"omnirepo".green.bold} ] Omnibus repository unification tool..."

def omnirepo?
  if File.exists?(File.join("#{Dir.pwd}/#{ARGV[1]}", ".omnirepo"))
    require 'psych'
    return true
  end
  false
end

def urandom_id(length=24)
  `cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w #{length} | head -n 1`.strip.chomp
end

def success?(results)
  return false unless results.is_a?(Array)
  results.uniq!
  return false unless results.one?
  results.first == true
end

bad_bullet = "*".red.bold
good_bullet = "*".green.bold
humble_bullet = "*".cyan

instance = urandom_id(5)

begin

  #de TODO: Validate owner.
  #de TODO: Allow use of literal paths, vs. relative.
  #de TODO: Check permissions/writeability, etc.

  if ARGV.length == 2 && omnirepo?
    OWNER = ARGV.shift
    OMNIBUS = "#{Dir.pwd}/#{ARGV.shift}"
    CONFIG = Psych.load_file(File.join(OMNIBUS, ".omnirepo"))
    unless CONFIG.is_a?(Hash) && CONFIG["repositories"].is_a?(Array)
      puts "#{bad_bullet} Onmirepo configuration file invalid."
      exit!
    end
    REPOSITORIES = CONFIG['repositories'].uniq
    GIT = CONFIG["git"] if CONFIG["git"].is_a?(String)
  elsif ARGV.length <= 3
    puts "Usage: omnirepo <owner org/user> <destination-omnibus-dir> <source-repo1> <source-repo2> [...]"
    puts "#{bad_bullet} No owner organization/username supplied." unless ARGV.any?
    puts "#{bad_bullet} No destination omnibus directory supplied." unless ARGV.length >= 2
    puts "#{bad_bullet} No source repositories supplied." unless ARGV.length == 3
    puts "#{bad_bullet} Only one source repository supplied." if ARGV.length == 3
    exit!
  else
    OWNER = ARGV.shift
    OMNIBUS = "#{Dir.pwd}/#{ARGV.shift}"
    REPOSITORIES = ARGV.uniq
    CONFIG = {}
  end

  GIT = "git@github.com".freeze unless defined? GIT

  object_prefix = CONFIG["object_prefix"] || "standalone/"
  tmp='/dev/shm'
  tmp='/tmp' unless Dir.exists?(tmp)
  TMP="#{tmp}/omnirepo.#{urandom_id}".chomp.strip

  unless Dir.mkdir(TMP)
    STDERR.puts "#{"ERROR".red.bold}: Unable to make the temporary working directory: #{TMP}"
    exit!
  end

  puts LINE

  unless Dir.exists?(OMNIBUS)
    puts "Destination omnibus directory does not exist: #{OMNIBUS}"
    exit!
  end

  puts "\t#{good_bullet} Instance: #{instance.green}"
  puts "\t#{good_bullet} Owner organization/user: #{OWNER.green}"
  puts "\t#{good_bullet} Destination omnibus: #{OMNIBUS.green}"
  puts "\t#{good_bullet} Working directory: #{TMP}"

  Dir.chdir(OMNIBUS)

  if `git show 2> /dev/null | grep "commit" | wc -l`.to_i != 1
    puts LINE
    STDERR.puts "#{"ERROR".red.bold}: Destination omnibus directory is not a git repository, or not ready."
    exit!
  end

  puts LINE

  #de TODO: Further validate omnibus repository.

  branches = {}
  failures = []
  repos = []

  REPOSITORIES.each { |repo|

    puts "\n\n#{LINE}\n#{humble_bullet} Adding the #{repo.bold} repository from #{"#{GIT}:#{OWNER}/#{repo}.git".bold}\n#{LINE}"

    unless Dir.chdir(TMP)
      STDERR.puts "#{"ERROR".red.bold}: Failure to change to the temporary working directory."
      exit!
    end

    unless system("git clone --mirror '#{GIT}:#{OWNER}/#{repo}.git' #{repo}")
      puts "F#{"ERROR".red.bold}: ailed to clone: #{repo}"
      exit!
    end

    unless Dir.chdir(repo_bare = File.join(TMP, repo))
      STDERR.puts "#{"ERROR".red.bold}: Failed to mirror the #{repo} repository."
      exit!
    end

    if `git remote | grep origin | wc -l`.to_i > 0
      `git remote rm origin > /dev/null 2> /dev/null`
    end

    repo_clone = "#{repo_bare}.clone"
    unless system("git clone -q . #{repo_clone}")
      STDERR.puts "#{"ERROR".red.bold}: Failed to make local clone of #{repo}."
      failures << "#{repo} / locally clone"
      next
    end

    Dir.chdir(repo_clone)

    begin
      if CONFIG['submodules'] == 'remove'
        if File.exists?(module_config = File.join(repo_clone, ".gitmodules"))
          submodules = File.read(module_config)
                        .split("\n")
                        .map { |line|
                          if line.include?("path =")
                            submodule = line.sub("path =", "").chomp.strip
                            unless submodule.empty?
                              submodule
                            end
                          else
                            nil
                          end
                        }.compact

          puts "\n\n#{LINE}\n#{humble_bullet} Removing submodules: #{submodules.join(', ')}\n#{LINE}"
          unless system("git filter-branch --tag-name-filter cat --tree-filter 'rm -rf #{submodules.join(' ')} .gitmodules' -- --all")
            failures << "#{repo} / submodules: remove .gitmodules, then commit/push"
          end
        end
      end
    rescue => ex
      STDERR.puts "#{bad_bullet} #{"WARN:".red} Could not remove associated submodules.\nReason: #{ex}"
      failures << "#{repo} / remove submodules"
    end

    puts "\n\n#{LINE}\n#{humble_bullet} Preserving change history and files, but making the repository a sub-directory...\n#{LINE}"
    print "... please wait: "

    filtering = "git filter-branch -f --tag-name-filter cat --index-filter 'SHA=$(git write-tree); " +
                "rm $GIT_INDEX_FILE && git read-tree --prefix=#{repo}/ $SHA' -- --all"

    failures << "#{repo} / repository tree-filter" unless system(filtering)

    tags = []
    `git tag`.split("\n").each { |tag|
      begin
        result = []
        tags << (tag = tag.chomp.strip)
        result << system("git tag '#{object_prefix}#{repo}/#{tag}' '#{tag}' > /dev/null")
        result << system("git tag -d '#{tag}'")
      rescue => ex
        STDERR.puts "#{bad_bullet} #{"WARN:".red} Could not migrate the #{tag} tag.\nReason: #{ex}"
        result << false
      ensure
        failures << "#{repo} / tag: #{tag}" unless success?(result)
      end
    }

    Dir.chdir(repo_bare)
    system("git remote add clone #{repo_clone}")
    system("git tag | xargs git tag -d")
    puts "\n\n#{LINE}\n#{humble_bullet} Synchronizing all changes to working repository...\n#{LINE}"
    failures << "synchronize working repos" unless system("git fetch -u --tags clone +refs/heads/*:refs/heads/*")

    branches[repo] = []
    `git branch | grep -v "refs/"`.split("\n").each { |branch|
      begin
        result = nil
        branch = branch.gsub("* ", "").strip.chomp
        b = "#{object_prefix}#{repo}/#{branch}"
        result = system("git branch -m '#{branch}' '#{b}'")
        branches[repo] << b
      rescue => ex
        STDERR.puts "#{bad_bullet} #{"WARN:".red} Could not migrate the #{branch} branch.\nReason: #{ex}"
      ensure
        unless result
          failures << "#{repo} / branch: #{branch}"
        end
      end
    }

    unless CONFIG['merging'] == 'skip'
      result = []
      Dir.chdir(OMNIBUS)
      result << system("git remote add #{repo}.#{instance} #{repo_bare}")
      unless success?(result)
        failures << "#{repo} / attach remote to omnibus"
        next
      end
    end
    repos << repo
  }

  unless CONFIG['merging'] == 'skip'
    puts "\n\n#{LINE}\n#{humble_bullet} Merging the prepared standalone repositories into the omnibus...\n#{LINE}"
    if repos.any?
      if system("git fetch --all")
        repos.each { |repo|

          if branches[repo].any?
            puts "#{good_bullet} Merge branch into master: #{"#{repo}.#{instance}/#{object_prefix}#{repo}/master".cyan}"
            unless system("git merge --no-ff --commit -m '[omnirepo] merging #{object_prefix}#{repo}/master into origin/master' #{repo}.#{instance}/#{object_prefix}#{repo}/master")
              failures << "#{repo} / merging in master branch"
            end
            branches[repo].each { |branch|
              failures << "#{repo} / merging in branch: #{branch}" unless system("git fetch '#{repo}.#{instance}' '#{branch}:#{branch}'")
            }
          else
            failures << "#{repo} / no branches"
          end

          failures << "#{repo} / removing temporary remote" unless system("git remote rm #{repo}.#{instance}")

        }
      else
        failures << "fetching all repositories"
      end
    else
      failures << "no repositories to merge in"
    end
  end

  puts "\n\n#{LINE}\n#{humble_bullet} Garbage collection of the omnibus repository...\n#{LINE}"
  failures << "omnibus garbage collection" unless system("git gc --aggressive")

  puts "\n\n\n"
  #de TODO: Delete working directory, or at least give config or command line option to do so.

  if failures.any?
    puts "#{LINE}\nThere were the following failures:\n#{LINE}\n\t#{bad_bullet} #{failures.join("\n\t#{bad_bullet} ")}"
  end

  puts "\n\n\n#{LINE}\n#{humble_bullet} Remove your temporary working directory when you are ready:"
  puts "         #{TMP}"
  puts "#{LINE}\n#{humble_bullet} #{"WARNING:".bold} Be sure to check over the new omnibus repository before pushing it!"
  puts "         Each repository has been committed into it.\n\n"

  if repos.any?
    puts LINE
    puts "The following repositories were combined into one omnibus repository:\n#{LINE}\n\t#{good_bullet} #{repos.join("\n\t#{good_bullet} ")}"
  end

  puts "#{LINE}\n[ #{"omnirepo".green.bold} ] Omnibus unification of repositories finished in #{"%0.4f" % (Time.now.to_f - start.to_f)} seconds.\n#{LINE}\n\n"

rescue => ex
  puts "Exiting prematurely. Re-run to make an intact omnibus repository."
  STDERR.puts "Error: #{ex}" unless ex.is_a?(Interrupt)
  exit(false)
end
